---
import Action from "@/components/Action.astro"
import ForecastBoxer from "@/components/ForecastBoxer.astro"
import Velocimetro from "@/components/Velocimetro.astro"
import { BOXERS } from "@/consts/boxers"
import { COMBATS } from "@/consts/combats"

export interface Props {
	combatId: string
}

const { combatId } = Astro.props

const combat = COMBATS.find((combat) => combat.id === combatId)
const boxers = combat?.boxers.map((boxer) => BOXERS.find((b) => b.id === boxer)) ?? []
---

<section
	id="forecast"
	data-combat-id={combatId}
	class="forecastGrid mt-40 grid items-center gap-4 px-7"
>
	{
		boxers[0] && (
			<ForecastBoxer
				image={`https://cdn.lavelada.dev/boxers/${boxers[0].id}-big.webp`}
				imageAlt={`${boxers[0].name}`}
				boxerId={boxers[0].id}
				boxerName={boxers[0].name}
				boxerHref={`/boxers/${boxers[0].id}`}
				class:list={["boxer1"]}
			/>
		)
	}
	<div class="pronostico flex flex-col items-center justify-center gap-4">
		<h2 class="text-2xl font-medium uppercase text-white">Pronóstico</h2>
		<p class="max-w-72 text-center text-xl text-primary opacity-0">
			Basado en <span class="font-semibold text-accent">0</span> predicciones
		</p>
		{boxers[1] && <Velocimetro />}
	</div>
	{
		boxers[1] && (
			<ForecastBoxer
				image={`https://cdn.lavelada.dev/boxers/${boxers[1].id}-big.webp`}
				imageAlt={`${boxers[1].name}`}
				boxerId={boxers[1].id}
				boxerName={boxers[1].name}
				boxerHref={`/boxers/${boxers[1].id}`}
				class:list={["boxer2"]}
			/>
		)
	}
	<div class="action flex w-full flex-col items-center justify-center">
		<Action
			class="mt-20 w-full max-w-lg text-center text-base uppercase text-primary"
			as="a"
			href="/pronosticos"
		>
			¡Haz tu pronóstico!
		</Action>
	</div>
</section>

<script>
	import { $ } from "@/lib/dom-selector"

	document.addEventListener("astro:page-load", () => {
		const $forecast = $("#forecast") as HTMLElement
		if ($forecast == null) return

		const combatId = $forecast.getAttribute("data-combat-id")
		fetch(`/api/forecasts/get-forecast-by-combat-id.json?id=${combatId}`)
			.then((res) => res.json())
			.then((json: { data: { totalVotes: number; percentageVotes: Record<string, number> } }) => {
				const { totalVotes, percentageVotes } = json?.data ?? {}
				if (totalVotes == null || totalVotes === 0) return

				const [, lastBoxer] = $forecast.querySelectorAll(".boxer-forecast")
				const lastBoxerId = lastBoxer.getAttribute("data-id")
				if (lastBoxerId == null) return

				const percentage = percentageVotes[lastBoxerId]
				if (percentage) {
					const event = new CustomEvent("forecast:loaded", { detail: percentage })
					dispatchEvent(event)
				}

				const $pronostico = $forecast.querySelector(".pronostico") as HTMLElement
				$pronostico.querySelector(".opacity-0")?.classList.remove("opacity-0")

				const $pronosticoNumber = $pronostico.querySelector("span")
				if ($pronosticoNumber) $pronosticoNumber.innerText = totalVotes.toString()

				Object.entries(percentageVotes).forEach(([boxerId, forecast]) => {
					const el = $(`.boxer-forecast[data-id="${boxerId}"]`)
					if (el) el.innerText = `${forecast.toFixed(2)}%`
				})
			})
	})
</script>

<style>
	.forecastGrid {
		grid-template-areas: "prono prono" "boxer1 boxer2" "action action";
		column-gap: 2rem;
		.pronostico {
			grid-area: prono;
		}
		.boxer1 {
			grid-area: boxer1;
		}
		.boxer2 {
			grid-area: boxer2;
		}
		.action {
			grid-area: action;
		}
	}

	@media (min-width: 1150px) {
		.forecastGrid {
			grid-template-columns: repeat(3, 1fr);
			grid-template-areas:
				"boxer1 prono boxer2"
				"action action action";
		}
	}
</style>
